<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stefano Zanella's Blog]]></title>
  <link href="http://blog.dontwakethecat.net/atom.xml" rel="self"/>
  <link href="http://blog.dontwakethecat.net/"/>
  <updated>2013-02-13T23:24:57+01:00</updated>
  <id>http://blog.dontwakethecat.net/</id>
  <author>
    <name><![CDATA[Stefano Zanella]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Puppet Module Skeleton, CI Friendly]]></title>
    <link href="http://blog.dontwakethecat.net/blog/2013/02/12/puppet-module-skeleton/"/>
    <updated>2013-02-12T20:24:00+01:00</updated>
    <id>http://blog.dontwakethecat.net/blog/2013/02/12/puppet-module-skeleton</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>I&#8217;ll create here a skeleton that can be useful for developing Puppet modules that
adhere to some of the basic good development practices, such as testing and
continuous integration.
Why don&#8217;t I just use <code>puppet module generate</code>, you say? Because I want to have a more
complete testing framework in place, and also have some additional
facilities for reporting on tests. Though, using Puppet&#8217;s <strong>module</strong> face isn&#8217;t
incompatible with what depicted here; you can just run it before performing the
steps that follow, ignoring the creation of module&#8217;s directories.</p>

<!-- More -->


<h2>Basic structure</h2>

<p>We start by creating the directory where the module will live:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir &lt;modulename&gt;
</span><span class='line'><span class="nb">cd</span> &lt;modulename&gt;
</span></code></pre></td></tr></table></div></figure>


<p>After that, we need to setup the basic layout of a standard Puppet module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir manifests files lib templates
</span></code></pre></td></tr></table></div></figure>


<p>Then, we create the main manifest of the module (this will come in
handy shortly):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vi manifests/init.pp
</span></code></pre></td></tr></table></div></figure>


<p>The content will be pretty basic for the moment. It will contain the same
documentation sketch that <code>puppet module</code> generates, and obviously the class
that gives name to the module itself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="c-Singleline"># == Class: &lt;modulename&gt;</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># Full description of class &lt;modulename&gt; here.</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># === Parameters</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># Document parameters here.</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># [*sample_parameter*]</span>
</span><span class='line'><span class="c-Singleline">#   Explanation of what this parameter affects and what it defaults to.</span>
</span><span class='line'><span class="c-Singleline">#   e.g. &quot;Specify one or more upstream ntp servers as an array.&quot;</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># === Variables</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># Here you should define a list of variables that this module would require.</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># [*sample_variable*]</span>
</span><span class='line'><span class="c-Singleline">#   Explanation of how this variable affects the funtion of this class and if it</span>
</span><span class='line'><span class="c-Singleline">#   has a default. e.g. &quot;The parameter enc_ntp_servers must be set by the</span>
</span><span class='line'><span class="c-Singleline">#   External Node Classifier as a comma separated list of hostnames.&quot; (Note,</span>
</span><span class='line'><span class="c-Singleline">#   global variables should not be used in preference to class parameters  as of</span>
</span><span class='line'><span class="c-Singleline">#   Puppet 2.6.)</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># === Examples</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># === Authors</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># Author Name &lt;author@domain.com&gt;</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># === Copyright</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># Copyright 2013 Your name here, unless otherwise noted.</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="kd">class</span> <span class="err">&lt;</span><span class="nc">modulename</span><span class="err">&gt;</span> <span class="p">{</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>Ruby and Gemfile</h2>

<p>We rely on functionality provided by a bunch of external gems. In this cases
(i.e. always), I manage Ruby projects with
<a href="https://github.com/sstephenson/rbenv/">rbenv</a> and
<a href="http://gembundler.com/">Bundler</a>, so every folder is perfectly isolated from
the others.</p>

<p>I won&#8217;t go into installing <strong>rbenv</strong> and the <strong>ruby-build</strong> plugin. You can
read the excellent documentation on project&#8217;s homepage. Instead, let&#8217;s declare
which version of Ruby we want to use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rbenv <span class="nb">local </span>1.9.3-p374
</span></code></pre></td></tr></table></div></figure>


<p>Then, assuming gem <code>bundler</code> is already installed, let&#8217;s setup project
dependencies in the <code>Gemfile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="ss">:rubygems</span>
</span><span class='line'><span class="n">puppetversion</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="s1">&#39;PUPPET_VERSION&#39;</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;= </span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;PUPPET_VERSION&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">:</span> <span class="s2">&quot;&gt;= 3.0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rake&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;puppet&#39;</span><span class="p">,</span> <span class="n">puppetversion</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-puppet&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-hiera-puppet&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;puppet-lint&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;ci_reporter&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;puppetlabs_spec_helper&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is what&#8217;s in there:</p>

<ul>
<li>on <strong>line 2</strong>, we set a variable to require the correct puppet version, depending
on which one we want to develop upon. This variable is tweakable from the
external environment; this is useful e.g. if we want to perform a matrix
build of the module, checking if code works for different versions of Puppet</li>
<li><code>rspec-puppet</code> provides a set of helpers for writing tests against Puppet
code</li>
<li><code>rspec-hiera-puppet</code> allows us to use/test Hiera in our tests</li>
<li><code>puppet-lint</code> provides a Rake task to check if Puppet code adhere to
Puppetlabs guidelines</li>
<li><code>ci_reporter</code> provides an helper to generate reports that can be read from
Jenkins</li>
<li><code>puppetlabs_spec_helper</code> provides a set of helpers to handle initialization
of Puppet environment when testing.</li>
</ul>


<p>At this point we can proceed to installing the module&#8217;s dependencies with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install --path vendor/bundle
</span></code></pre></td></tr></table></div></figure>


<h2>Rspec initialization</h2>

<p>The next step is to setup the directory that will hold our test code. Luckily,
the excellent <strong>rspec-puppet</strong> tool can help us a lot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>rspec-puppet-init
</span></code></pre></td></tr></table></div></figure>


<p>In particular, the command above will take care of symlinking the folders in
the module&#8217;s root into <code>spec/fixtures/modules/&lt;modulename&gt;</code>, looking at the
main module&#8217;s manifest to find the correct name to use. It will also setup
a basic <code>spec_helper</code> and <code>Rakefile</code>; the latter is the first step into CI
integration.</p>

<p>At this point we need to tweak the configuration in a couple of points.<br/>
First thing first, as I explain in <a href="https://gist.github.com/stefanozanella/4190920">this Gist</a>,
if you want to test a Puppet declaration that uses a function coming from an
external module (as those in <strong>stdlib</strong>), you need to have the functions into
the <code>LOAD_PATH</code> before running the tests. So, put the following line on top of
your <code>spec_helper.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$:</span><span class="o">.</span><span class="n">unshift</span> <span class="o">*</span><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../fixtures/modules/*/lib&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, we want to use
<a href="https://github.com/puppetlabs/puppetlabs_spec_helper">Puppetlabs&#8217; <em>spec_helper</em></a>
so we can avoid setting up Puppet state for testing. Following the instruction
on the project&#8217;s home page, we again update <code>spec_helper</code> as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;puppetlabs_spec_helper/module_spec_helper&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Rakefile</h2>

<p>Next, we put our attention to the <code>Rakefile</code>. We want to:</p>

<ul>
<li>include the set of tasks provided by <code>puppetlabs_spec_helper</code></li>
<li>configure the <code>ci_reporter</code> gem to report our test results to Jenkins</li>
<li>add a task to perform syntax-checking on the module&#8217;s code</li>
</ul>


<p>The first step is the simplest; it&#8217;s as simple as adding the following line to
the <code>Rakefile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;puppetlabs_spec_helper/rake_tasks&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will make several tasks available to rake. One of these is <code>lint</code>, which
we want to use to check if our code is best-practices compliant; unfortunately,
the standard way it works is to check every <code>*.pp</code> file into the codebase. This
means it will also check manifests e.g. from the Puppet codebase we have into
<code>vendor</code>. You can easily understand that this way everything is going berserk.<br/>
To solve this problem we can tweak the configuration of <code>puppet-lint</code>, changing
the paths it will look into:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Configured to be recognizable by Jenkins warnings plugin</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;puppet-lint/tasks/puppet-lint&#39;</span>
</span><span class='line'><span class="no">PuppetLint</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">ignore_paths</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;vendor/**/*.pp&quot;</span><span class="p">,</span> <span class="s2">&quot;spec/**/*.pp&quot;</span><span class="o">]</span>
</span><span class='line'><span class="no">PuppetLint</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">log_format</span> <span class="o">=</span>
</span><span class='line'>  <span class="s2">&quot;%{path}:%{linenumber}:%{check}:%{KIND}:%{message}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Contextually, we also set the format of the output so Jenkins can recognize
what the lint tool is reporting and show it in its awesome UI.</p>

<p>Next, we want to report on Jenkins how many tests there are in our codebase and
how many of them are broken. Jenkins can store the history of this metric and
show it in a nice graph on the build job dashboard. This task is performed by
the <code>ci_reporter</code> gem, which can be configured as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Used by Jenkins to show tests report.</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ci/reporter/rake/rspec&#39;</span>
</span><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;CI_REPORTS&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;reports&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Last, before checking if Puppet code adhere to the guidelines, we want to check if
it is actually syntactically correct. To do this, Puppet&#8217;s CLI tool provides a
<strong>parser</strong> face that does just that. Since I prefer, where possibile, to do things
in code instead of invoking bash commands in Rakefiles (which in turn call code :),
the Puppet face module must be loaded, and then the parser face can be called
asking for code validation. The rake task to perform this check can be written
as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Invoked by Jenkins to validate manifest syntax</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;puppet/face&#39;</span>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Perform puppet parser&#39;s validation on manifests&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:validate</span> <span class="k">do</span>
</span><span class='line'>  <span class="ss">Puppet</span><span class="p">:</span><span class="ss">:Face</span><span class="o">[</span><span class="ss">:parser</span><span class="p">,</span> <span class="s1">&#39;0.0.1&#39;</span><span class="o">].</span><span class="n">validate</span><span class="p">(</span><span class="no">FileList</span><span class="o">[</span><span class="s1">&#39;**/*.pp&#39;</span><span class="o">].</span><span class="n">exclude</span><span class="p">(</span><span class="s1">&#39;vendor/**/*.pp&#39;</span><span class="p">,</span> <span class="s1">&#39;spec/**/*.pp&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">())</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To finish with the Rakefile, we remove the code installed by default by
<code>rspec-puppet</code>, which is obsolete given we included Puppetlabs&#8217; helper. And,
since I&#8217;m fucking lazy, let&#8217;s add a default task that performs validation,
linting and testing in a single command.<br/>
The final <code>Rakefile</code> looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rake&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;puppetlabs_spec_helper/rake_tasks&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Configured to be recognizable by Jenkins warnings plugin</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;puppet-lint/tasks/puppet-lint&#39;</span>
</span><span class='line'><span class="no">PuppetLint</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">ignore_paths</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;vendor/**/*.pp&quot;</span><span class="p">,</span> <span class="s2">&quot;spec/**/*.pp&quot;</span><span class="o">]</span>
</span><span class='line'><span class="no">PuppetLint</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">log_format</span> <span class="o">=</span>
</span><span class='line'>  <span class="s2">&quot;%{path}:%{linenumber}:%{check}:%{KIND}:%{message}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Used by Jenkins to show tests report.</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ci/reporter/rake/rspec&#39;</span>
</span><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;CI_REPORTS&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;reports&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Invoked by Jenkins to validate manifest syntax</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;puppet/face&#39;</span>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Perform puppet parser&#39;s validation on manifests&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:validate</span> <span class="k">do</span>
</span><span class='line'>  <span class="ss">Puppet</span><span class="p">:</span><span class="ss">:Face</span><span class="o">[</span><span class="ss">:parser</span><span class="p">,</span> <span class="s1">&#39;0.0.1&#39;</span><span class="o">].</span><span class="n">validate</span><span class="p">(</span><span class="no">FileList</span><span class="o">[</span><span class="s1">&#39;**/*.pp&#39;</span><span class="o">].</span><span class="n">exclude</span><span class="p">(</span><span class="s1">&#39;vendor/**/*.pp&#39;</span><span class="p">,</span> <span class="s1">&#39;spec/**/*.pp&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">())</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Run puppet-lint and rspec puppet in sequence&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:lint</span><span class="p">,</span> <span class="ss">:validate</span><span class="p">,</span> <span class="ss">:spec</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Fixtures</h2>

<p>As stated in
<a href="https://puppetlabs.com/blog/the-next-generation-of-puppet-module-testing/">this post</a>
from PuppetLabs, we need to setup a file that declares the fixtures we want to
have in place when testing our codebase. Let&#8217;s pretend the module has a
dependency on PuppetLabs&#8217; <code>stdlib</code> (which is what happens in most cases, if,
for example, you&#8217;re using validation - and you <strong>DO</strong> validate your
parameters, right?); we need to setup a <code>.fixtures.yml</code> file that looks like
this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">fixtures</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">repositories</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">stdlib</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git://github.com/puppetlabs/puppetlabs-stdlib.git</span>
</span><span class='line'>  <span class="l-Scalar-Plain">symlink</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">&lt;modulename&gt;</span><span class="p-Indicator">:</span> <span class="s">&quot;#{source_dir}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember that this file needs to be updated whenever module&#8217;s dependencies
change.</p>

<h2>Modulefile</h2>

<p>In the hope that someday Puppetlabs finally releases an API/client library to
publish modules to the Forge (which I think should be very soon from now),
let&#8217;s create a <code>Modulefile</code> that describes the module and its dependencies.
This will also be useful to instruct <code>librarian-puppet</code> about the modules it
effectively needs to install.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">name    &#39;&lt;author&gt;-&lt;modulename&gt;&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">version &#39;0.0.1&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">source &#39;UNKNOWN&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">author &#39;&lt;author&gt;&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">license &#39;Apache License, Version 2.0&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">summary &#39;...&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">description &#39;.......&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">project_page &#39;UNKNOWN&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">## Add dependencies, if any</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">dependency &#39;puppetlabs/stdlib&#39;, &#39;&gt;= 3.2.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>README</h2>

<p>It&#8217;s also good practice to add a <code>README</code>, as explained in
<a href="https://puppetlabs.com/blog/writing-great-modules-an-introduction/">this must-read</a>
from Puppetlabs itself. I won&#8217;t go into details here, since apart from a common
layout, information in this file vary greatly depending on the project.<br/>
The only thing I feel to say is quoting the suggestion in that same article
of reading the readme of Carl Caum&#8217;s
<a href="http://github.com/puppetlabs/puppetlabs-bacula">Bacula module</a>; that explains
pretty everything.</p>

<h2>Smoke tests</h2>

<p>If you feel really cool, you can also add a smoke test into the <code>tests</code> folder,
which is basically a working manifest that can be called directly with <code>puppet
apply --noop</code>. If you&#8217;re using the <code>module</code> face of the <code>puppet</code> command, it
will automatically create a <code>init.pp</code> that includes the main module&#8217;s class.
Just, pay attention to the fact that you would need to keep this manifests
up-to-date with your code (e.g. setting proper parameters and instantiating
other resources that participate in the definition of a real, working
use-case).</p>

<h2>What happened to Git?</h2>

<p>Till now, I completely left out versioning this skeleton project. This is
because I didn&#8217;t find yet my preferred way to properly handle versioning and easily
enable to bootstrap new modules based on this skeleton. I don&#8217;t exclude this
way could be putting everything in a gem or rake task or bash script that can bootstrap a
directory where a module is to be developed. Will see what the immediate future
will suggest. For now, please allow me not to give an answer on this subject.</p>

<h2>Additional resources</h2>

<p>You can find additional information about testing Puppet code in
<a href="https://puppetlabs.com/blog/the-next-generation-of-puppet-module-testing/">these</a>
<a href="https://puppetlabs.com/blog/test-driven-development-with-puppet/">articles</a>
from
<a href="https://puppetlabs.com/blog/verifying-puppet-checking-syntax-and-writing-automated-tests/">Puppet Labs</a>.
Note that few things, like, Cucumber for Puppet, are considered deprecated;
nevertheless, they&#8217;re worth reading if you care about quality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speaking in tongues with SSL]]></title>
    <link href="http://blog.dontwakethecat.net/blog/2013/01/22/speaking-in-tongues-with-ssl/"/>
    <updated>2013-01-22T16:56:00+01:00</updated>
    <id>http://blog.dontwakethecat.net/blog/2013/01/22/speaking-in-tongues-with-ssl</id>
    <content type="html"><![CDATA[<p>This was a nice one; let me explain.</p>

<p>I&#8217;ve setup a PotgreSQL host to hold all the various databases for the various
services deployed in the infrastructure. Since I know I&#8217;m not a security
expert, where I can I try to do the bare minumum needed and use SSL. This is
the case for PostgreSQL; not only, but I try hard to enforce two-way
certificate validation where possibile.</p>

<!-- More -->


<p>It turns out that despite the simplicity behind the concept of two-way
certificate validation, very few <em>&#8220;modern&#8221;</em> services support that in a
user-friendly way. I already had a chance to rant a bit on Twitter about the
problems Puppet is currently facing with SSL; this time I want to tell you this
story that involves the <a href="https://code.google.com/p/gerrit/">Gerrit Code Review</a>
application and the way I solved the problem, which in my opinion is quite
hacky (and will possibly break things in a near future).</p>

<p>First, a little overview of two-way SSL certificate validation. Basically, in
normal circumstances, during a SSL handshake, only the client verifies that the
certificate the server is providing is valid (checking against a list of known
and trusted Certificate Authorities); when performing two-way validation, this
process is true also for the server. That is, the server expects the client to
send a certificate and verifies that it can be trusted with the same mechanism.<br/>
This is useful when you&#8217;re running your own PKI and can freely issue
certificates to all your hosts; it becomes a form of authentication similar to
that we all use when doing public key authentication in SSH (maybe even
stronger).<br/>
For this to work, obviously, there must be explicit configuration support on
the client service to point to certificate, private key and CA that will be
used when handshaking with the server. Also, note that you cannot simply
disable certificate validation, since this will only lower the barrier <strong>on one
side</strong> of the communication channel: the server will still require you (the
client) to provide a valid certificate (in most cases you can tell the server
to relax the constraint, but then this discussion would become a little
pointless).</p>

<p>Here is where problems begin: let&#8217;s look specifically at how this can be
handled in Gerrit.<br/>
In particular, let&#8217;s see how a typical database setup looks like in Gerrit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[database]</span>
</span><span class='line'>  <span class="na">type</span> <span class="o">=</span> <span class="s">POSTGRESQL</span>
</span><span class='line'><span class="s">  hostname = postgresql.derecom.it</span>
</span><span class='line'><span class="s">  database = gerrit</span>
</span><span class='line'><span class="s">  username = gerrit</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will tell JDBC to connect to <code>postgresql.derecom.it</code> and look for database
<code>gerrit</code>, authenticating with user <code>gerrit</code> (password is handled in another
file). See? No mention to <strong>SSL</strong>. Unofrtunately, JDBC doesn&#8217;t automatically
recognizes that it needs to setup a SSL connection, and trying to boot the
gerrit server results in this kind of error on the PosgtreSQL host:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="err">FATAL:</span>  <span class="err">no</span> <span class="err">pg_hba.conf</span> <span class="err">entry</span> <span class="err">for</span> <span class="err">host</span> <span class="err">&quot;x.y.z.w&quot;,</span> <span class="err">user</span> <span class="err">&quot;gerrit&quot;,</span> <span class="err">database</span> <span class="err">&quot;gerrit&quot;,</span> <span class="err">SSL</span> <span class="err">off</span>
</span></code></pre></td></tr></table></div></figure>


<p>(that&#8217;s because I <strong>don&#8217;t allow unencrypted connections to databases</strong>).</p>

<p>It seems that there&#8217;s no hope to solve this. Luckily, though, Gerrit use JDBC
under the hood to manage the connection pool; looking through
<a href="http://jdbc.postgresql.org/documentation/80/connect.html">JDBC PosgtreSQL driver documentation</a>,
we can read that:</p>

<blockquote><p> In addition to the standard connection parameters the driver supports a
 number of additional properties which can be used to specify additional
 driver behavior specific to PostgreSQL™. These properties may be specified
 in either the connection URL or an additional Properties object parameter to
 DriverManager.getConnection. The following examples illustrate the use of
 both methods to establish a SSL connection.</p>

<p>String url = &#8220;jdbc:postgresql://localhost/test&#8221;;<br/>
Properties props = new Properties();<br/>
props.setProperty(&#8220;user&#8221;,&#8221;fred&#8221;);<br/>
props.setProperty(&#8220;password&#8221;,&#8221;secret&#8221;);<br/>
props.setProperty(&#8220;ssl&#8221;,&#8221;true&#8221;);<br/>
Connection conn = DriverManager.getConnection(url, props);</p>

<p>String url =<br/>
&#8220;jdbc:postgresql://localhost/test?user=fred&amp;password=secret<strong>&amp;ssl=true</strong>&#8221;;<br/>
Connection conn = DriverManager.getConnection(url);</p></blockquote>

<p>So, it seems that if we could pass a <code>ssl</code> parameter to the JDBC URL we could
enable SSL while connection to PostgreSQL. A first solution is to set the
connection type to <code>JDBC</code> instead of <code>POSTGRESQL</code> in Gerrit configuration. This
would allow you to directly specify the URL JDBC should connect to, parameters
included.<br/>
Since I didn&#8217;t know if I would have had to specify also the user/pass in that
same URL, I wanted to try to stick to the <code>POSTGRESQL</code> type. Looking at
<a href="https://gerrit.googlesource.com/gerrit/+/7029fc15df86e6ef886d67a8117a39d21320fe60/gerrit-pgm/src/main/java/com/google/gerrit/pgm/util/DataSourceProvider.java">this class&#8217; source code</a>,
it turns out that Gerrit itself builds a JDBC URL, so using one of the other
connection types is just a tiny wrapper over the JDBC type. However, the URL is
built leaving out username and password, which are set separately when actually
instantiating the connection, and the last variable in the URL concatenation is
the database name. So, I modified the configuration by directly appending the
<code>ssl</code> param to the database name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[database]</span>
</span><span class='line'>  <span class="na">type</span> <span class="o">=</span> <span class="s">POSTGRESQL</span>
</span><span class='line'><span class="s">  hostname = postgresql.derecom.it</span>
</span><span class='line'><span class="s">  database = gerrit?ssl=true</span>
</span><span class='line'><span class="s">  username = gerrit</span>
</span></code></pre></td></tr></table></div></figure>


<p>You know what? That works like a charm :)<br/>
Obviously this is a bit hacky, and surely setting a JDBC is a more proper way
to handle this thing, however if it works&#8230;</p>

<p><strong>PS:</strong> I left out from the discussion a fundamental step, which is passing the
certificate, private key and CA to Gerrit to correctly handle the SSL
handshake. This involves passing two additional properties to Gerrit startup
command; I&#8217;ve already written down about it in
<a href="https://gist.github.com/4124338">this Gist</a>, so I won&#8217;t repeat myself here.</p>

<h2>Conclusion</h2>

<p>So, having spent almost 2 hours fixing this issue and writing about it, what I
can hope for is that developers start to care a little more about SSL and the
various ways it can be used. This would surely help changing the impression
that SSL is a though beast, as also noticed by
<a href="https://twitter.com/_masterzen_">Brice Figureau</a> in
<a href="http://www.masterzen.fr/2010/11/14/puppet-ssl-explained/">this post about Puppet SSL PKI</a>, and making our
infrastructures more secure overall.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pre-flight debrief]]></title>
    <link href="http://blog.dontwakethecat.net/blog/2013/01/19/pre-flight-debrief/"/>
    <updated>2013-01-19T20:20:00+01:00</updated>
    <id>http://blog.dontwakethecat.net/blog/2013/01/19/pre-flight-debrief</id>
    <content type="html"><![CDATA[<p>I&#8217;m writing this post as a sort of disclamer for the posts that will follow in
the (hopefully near) future.</p>

<p>I became a fan of documentation near three years ago. Since then, I mantained
(and am still mantaining) a sort of private wiki where I try do document
whatever I do. In some cases, this practice saved my ass: since for the moment
I don&#8217;t work in a team, I&#8217;m forced to continuously move between tasks that span
from the full Dev and Ops range. Sometimes quite some time can pass until I
need to return to a previous task to fix/improve things. This can be daunting,
since memory tends to be pretty unreliable in these cases; having a neat trace
of what I did helped me to quickly restore the archived knowledge.<br/>
Over time, documenting <strong>while</strong> doing has become almost a natural practice for
me, at least for what concerns operations tasks.</p>

<p>As stated above, till now I kept this documentation almost private, just
visible to interested friends that wanted to dig from time to time into what I
did; now I feel this practice has to change.<br/>
So, I decided to at least try to make my efforts public. I&#8217;m sure there won&#8217;t
be crowds of developers or sysadmins waiting for my next post; I&#8217;m not doing it
for this reason. I&#8217;ll just try to use the lever that is what in my opinion is
the biggest benfit of open source culture: it forces you to be better at what
you do.</p>

<p>So, this little detour over my recent history just to say one basic thing: I&#8217;m
gonna store here almost everything. So, expect to find obvious things as well
as not-so-obvious ones; actually, I suspect the former will overweight the latter
at least for the moment :)</p>

<p>Having clarified this basic concept, let&#8217;s see what the sudden future reserves:
I&#8217;m gonna talk a lot in the following months about my efforts to automate the
infrastructure I&#8217;m actually managing. This effort started slightly more than a
year ago when I discovered the excellent <a href="http://continuousdelivery.com/">&#8220;Continuous Delivery&#8221; book</a>
by <a href="https://twitter.com/jezhumble">Jez Humble</a> and David Farley.
Meanwhile, I&#8217;ve done a lot to try to add some solid
ground on the infrastructure while maintaining the existent. I now reached a
point in which I can start to implement all those nice automation practices.<br/>
I&#8217;ll try to convert documentation I&#8217;ve already written into something suitable
for the public audience; but, since I don&#8217;t want to start yak shaving right
from the beginning, I&#8217;ll try to stay pragmatic enough and start by writing
currently on-air tasks. For this reason, I apologize in advance if some pieces
will miss from what I&#8217;ll write.</p>

<p>I force myself now to stop adding to this post; enough self-centered writing
for my tastes. Better to start writing something more practical; I&#8217;ll start
with something very very basic and in very very little DevOps style: installing
a Puppet master node.</p>
]]></content>
  </entry>
  
</feed>
