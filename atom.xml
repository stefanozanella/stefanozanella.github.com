<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stefano Zanella's Blog]]></title>
  <link href="http://blog.dontwakethecat.net/atom.xml" rel="self"/>
  <link href="http://blog.dontwakethecat.net/"/>
  <updated>2013-02-13T23:26:13+01:00</updated>
  <id>http://blog.dontwakethecat.net/</id>
  <author>
    <name><![CDATA[Stefano Zanella]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Puppet Module Skeleton, CI Friendly]]></title>
    <link href="http://blog.dontwakethecat.net/blog/2013/02/12/puppet-module-skeleton/"/>
    <updated>2013-02-12T20:24:00+01:00</updated>
    <id>http://blog.dontwakethecat.net/blog/2013/02/12/puppet-module-skeleton</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>I&#8217;ll create here a skeleton that can be useful for developing Puppet modules that
adhere to some of the basic good development practices, such as testing and
continuous integration.
Why don&#8217;t I just use <code>puppet module generate</code>, you say? Because I want to have a more
complete testing framework in place, and also have some additional
facilities for reporting on tests. Though, using Puppet&#8217;s <strong>module</strong> face isn&#8217;t
incompatible with what depicted here; you can just run it before performing the
steps that follow, ignoring the creation of module&#8217;s directories.</p>

<!-- More -->


<h2>Basic structure</h2>

<p>We start by creating the directory where the module will live:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir &lt;modulename&gt;
</span><span class='line'><span class="nb">cd</span> &lt;modulename&gt;
</span></code></pre></td></tr></table></div></figure>


<p>After that, we need to setup the basic layout of a standard Puppet module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir manifests files lib templates
</span></code></pre></td></tr></table></div></figure>


<p>Then, we create the main manifest of the module (this will come in
handy shortly):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vi manifests/init.pp
</span></code></pre></td></tr></table></div></figure>


<p>The content will be pretty basic for the moment. It will contain the same
documentation sketch that <code>puppet module</code> generates, and obviously the class
that gives name to the module itself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="c-Singleline"># == Class: &lt;modulename&gt;</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># Full description of class &lt;modulename&gt; here.</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># === Parameters</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># Document parameters here.</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># [*sample_parameter*]</span>
</span><span class='line'><span class="c-Singleline">#   Explanation of what this parameter affects and what it defaults to.</span>
</span><span class='line'><span class="c-Singleline">#   e.g. &quot;Specify one or more upstream ntp servers as an array.&quot;</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># === Variables</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># Here you should define a list of variables that this module would require.</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># [*sample_variable*]</span>
</span><span class='line'><span class="c-Singleline">#   Explanation of how this variable affects the funtion of this class and if it</span>
</span><span class='line'><span class="c-Singleline">#   has a default. e.g. &quot;The parameter enc_ntp_servers must be set by the</span>
</span><span class='line'><span class="c-Singleline">#   External Node Classifier as a comma separated list of hostnames.&quot; (Note,</span>
</span><span class='line'><span class="c-Singleline">#   global variables should not be used in preference to class parameters  as of</span>
</span><span class='line'><span class="c-Singleline">#   Puppet 2.6.)</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># === Examples</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># === Authors</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># Author Name &lt;author@domain.com&gt;</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># === Copyright</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="c-Singleline"># Copyright 2013 Your name here, unless otherwise noted.</span>
</span><span class='line'><span class="c-Singleline">#</span>
</span><span class='line'><span class="kd">class</span> <span class="err">&lt;</span><span class="nc">modulename</span><span class="err">&gt;</span> <span class="p">{</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>Ruby and Gemfile</h2>

<p>We rely on functionality provided by a bunch of external gems. In this cases
(i.e. always), I manage Ruby projects with
<a href="https://github.com/sstephenson/rbenv/">rbenv</a> and
<a href="http://gembundler.com/">Bundler</a>, so every folder is perfectly isolated from
the others.</p>

<p>I won&#8217;t go into installing <strong>rbenv</strong> and the <strong>ruby-build</strong> plugin. You can
read the excellent documentation on project&#8217;s homepage. Instead, let&#8217;s declare
which version of Ruby we want to use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rbenv <span class="nb">local </span>1.9.3-p374
</span></code></pre></td></tr></table></div></figure>


<p>Then, assuming gem <code>bundler</code> is already installed, let&#8217;s setup project
dependencies in the <code>Gemfile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="ss">:rubygems</span>
</span><span class='line'><span class="n">puppetversion</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="s1">&#39;PUPPET_VERSION&#39;</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;= </span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;PUPPET_VERSION&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">:</span> <span class="s2">&quot;&gt;= 3.0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rake&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;puppet&#39;</span><span class="p">,</span> <span class="n">puppetversion</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-puppet&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-hiera-puppet&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;puppet-lint&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;ci_reporter&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;puppetlabs_spec_helper&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is what&#8217;s in there:</p>

<ul>
<li>on <strong>line 2</strong>, we set a variable to require the correct puppet version, depending
on which one we want to develop upon. This variable is tweakable from the
external environment; this is useful e.g. if we want to perform a matrix
build of the module, checking if code works for different versions of Puppet</li>
<li><code>rspec-puppet</code> provides a set of helpers for writing tests against Puppet
code</li>
<li><code>rspec-hiera-puppet</code> allows us to use/test Hiera in our tests</li>
<li><code>puppet-lint</code> provides a Rake task to check if Puppet code adhere to
Puppetlabs guidelines</li>
<li><code>ci_reporter</code> provides an helper to generate reports that can be read from
Jenkins</li>
<li><code>puppetlabs_spec_helper</code> provides a set of helpers to handle initialization
of Puppet environment when testing.</li>
</ul>


<p>At this point we can proceed to installing the module&#8217;s dependencies with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install --path vendor/bundle
</span></code></pre></td></tr></table></div></figure>


<h2>Rspec initialization</h2>

<p>The next step is to setup the directory that will hold our test code. Luckily,
the excellent <strong>rspec-puppet</strong> tool can help us a lot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>rspec-puppet-init
</span></code></pre></td></tr></table></div></figure>


<p>In particular, the command above will take care of symlinking the folders in
the module&#8217;s root into <code>spec/fixtures/modules/&lt;modulename&gt;</code>, looking at the
main module&#8217;s manifest to find the correct name to use. It will also setup
a basic <code>spec_helper</code> and <code>Rakefile</code>; the latter is the first step into CI
integration.</p>

<p>At this point we need to tweak the configuration in a couple of points.<br/>
First thing first, as I explain in <a href="https://gist.github.com/stefanozanella/4190920">this Gist</a>,
if you want to test a Puppet declaration that uses a function coming from an
external module (as those in <strong>stdlib</strong>), you need to have the functions into
the <code>LOAD_PATH</code> before running the tests. So, put the following line on top of
your <code>spec_helper.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$:</span><span class="o">.</span><span class="n">unshift</span> <span class="o">*</span><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../fixtures/modules/*/lib&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, we want to use
<a href="https://github.com/puppetlabs/puppetlabs_spec_helper">Puppetlabs&#8217; <em>spec_helper</em></a>
so we can avoid setting up Puppet state for testing. Following the instruction
on the project&#8217;s home page, we again update <code>spec_helper</code> as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;puppetlabs_spec_helper/module_spec_helper&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Rakefile</h2>

<p>Next, we put our attention to the <code>Rakefile</code>. We want to:</p>

<ul>
<li>include the set of tasks provided by <code>puppetlabs_spec_helper</code></li>
<li>configure the <code>ci_reporter</code> gem to report our test results to Jenkins</li>
<li>add a task to perform syntax-checking on the module&#8217;s code</li>
</ul>


<p>The first step is the simplest; it&#8217;s as simple as adding the following line to
the <code>Rakefile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;puppetlabs_spec_helper/rake_tasks&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will make several tasks available to rake. One of these is <code>lint</code>, which
we want to use to check if our code is best-practices compliant; unfortunately,
the standard way it works is to check every <code>*.pp</code> file into the codebase. This
means it will also check manifests e.g. from the Puppet codebase we have into
<code>vendor</code>. You can easily understand that this way everything is going berserk.<br/>
To solve this problem we can tweak the configuration of <code>puppet-lint</code>, changing
the paths it will look into:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Configured to be recognizable by Jenkins warnings plugin</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;puppet-lint/tasks/puppet-lint&#39;</span>
</span><span class='line'><span class="no">PuppetLint</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">ignore_paths</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;vendor/**/*.pp&quot;</span><span class="p">,</span> <span class="s2">&quot;spec/**/*.pp&quot;</span><span class="o">]</span>
</span><span class='line'><span class="no">PuppetLint</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">log_format</span> <span class="o">=</span>
</span><span class='line'>  <span class="s2">&quot;%{path}:%{linenumber}:%{check}:%{KIND}:%{message}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Contextually, we also set the format of the output so Jenkins can recognize
what the lint tool is reporting and show it in its awesome UI.</p>

<p>Next, we want to report on Jenkins how many tests there are in our codebase and
how many of them are broken. Jenkins can store the history of this metric and
show it in a nice graph on the build job dashboard. This task is performed by
the <code>ci_reporter</code> gem, which can be configured as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Used by Jenkins to show tests report.</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ci/reporter/rake/rspec&#39;</span>
</span><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;CI_REPORTS&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;reports&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Last, before checking if Puppet code adhere to the guidelines, we want to check if
it is actually syntactically correct. To do this, Puppet&#8217;s CLI tool provides a
<strong>parser</strong> face that does just that. Since I prefer, where possibile, to do things
in code instead of invoking bash commands in Rakefiles (which in turn call code :),
the Puppet face module must be loaded, and then the parser face can be called
asking for code validation. The rake task to perform this check can be written
as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Invoked by Jenkins to validate manifest syntax</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;puppet/face&#39;</span>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Perform puppet parser&#39;s validation on manifests&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:validate</span> <span class="k">do</span>
</span><span class='line'>  <span class="ss">Puppet</span><span class="p">:</span><span class="ss">:Face</span><span class="o">[</span><span class="ss">:parser</span><span class="p">,</span> <span class="s1">&#39;0.0.1&#39;</span><span class="o">].</span><span class="n">validate</span><span class="p">(</span><span class="no">FileList</span><span class="o">[</span><span class="s1">&#39;**/*.pp&#39;</span><span class="o">].</span><span class="n">exclude</span><span class="p">(</span><span class="s1">&#39;vendor/**/*.pp&#39;</span><span class="p">,</span> <span class="s1">&#39;spec/**/*.pp&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">())</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To finish with the Rakefile, we remove the code installed by default by
<code>rspec-puppet</code>, which is obsolete given we included Puppetlabs&#8217; helper. And,
since I&#8217;m fucking lazy, let&#8217;s add a default task that performs validation,
linting and testing in a single command.<br/>
The final <code>Rakefile</code> looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rake&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;puppetlabs_spec_helper/rake_tasks&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Configured to be recognizable by Jenkins warnings plugin</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;puppet-lint/tasks/puppet-lint&#39;</span>
</span><span class='line'><span class="no">PuppetLint</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">ignore_paths</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;vendor/**/*.pp&quot;</span><span class="p">,</span> <span class="s2">&quot;spec/**/*.pp&quot;</span><span class="o">]</span>
</span><span class='line'><span class="no">PuppetLint</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">log_format</span> <span class="o">=</span>
</span><span class='line'>  <span class="s2">&quot;%{path}:%{linenumber}:%{check}:%{KIND}:%{message}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Used by Jenkins to show tests report.</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ci/reporter/rake/rspec&#39;</span>
</span><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;CI_REPORTS&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;reports&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Invoked by Jenkins to validate manifest syntax</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;puppet/face&#39;</span>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Perform puppet parser&#39;s validation on manifests&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:validate</span> <span class="k">do</span>
</span><span class='line'>  <span class="ss">Puppet</span><span class="p">:</span><span class="ss">:Face</span><span class="o">[</span><span class="ss">:parser</span><span class="p">,</span> <span class="s1">&#39;0.0.1&#39;</span><span class="o">].</span><span class="n">validate</span><span class="p">(</span><span class="no">FileList</span><span class="o">[</span><span class="s1">&#39;**/*.pp&#39;</span><span class="o">].</span><span class="n">exclude</span><span class="p">(</span><span class="s1">&#39;vendor/**/*.pp&#39;</span><span class="p">,</span> <span class="s1">&#39;spec/**/*.pp&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">())</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Run puppet-lint and rspec puppet in sequence&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:lint</span><span class="p">,</span> <span class="ss">:validate</span><span class="p">,</span> <span class="ss">:spec</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Fixtures</h2>

<p>As stated in
<a href="https://puppetlabs.com/blog/the-next-generation-of-puppet-module-testing/">this post</a>
from PuppetLabs, we need to setup a file that declares the fixtures we want to
have in place when testing our codebase. Let&#8217;s pretend the module has a
dependency on PuppetLabs&#8217; <code>stdlib</code> (which is what happens in most cases, if,
for example, you&#8217;re using validation - and you <strong>DO</strong> validate your
parameters, right?); we need to setup a <code>.fixtures.yml</code> file that looks like
this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">fixtures</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">repositories</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">stdlib</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git://github.com/puppetlabs/puppetlabs-stdlib.git</span>
</span><span class='line'>  <span class="l-Scalar-Plain">symlink</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">&lt;modulename&gt;</span><span class="p-Indicator">:</span> <span class="s">&quot;#{source_dir}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember that this file needs to be updated whenever module&#8217;s dependencies
change.</p>

<h2>Modulefile</h2>

<p>In the hope that someday Puppetlabs finally releases an API/client library to
publish modules to the Forge (which I think should be very soon from now),
let&#8217;s create a <code>Modulefile</code> that describes the module and its dependencies.
This will also be useful to instruct <code>librarian-puppet</code> about the modules it
effectively needs to install.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">name    &#39;&lt;author&gt;-&lt;modulename&gt;&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">version &#39;0.0.1&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">source &#39;UNKNOWN&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">author &#39;&lt;author&gt;&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">license &#39;Apache License, Version 2.0&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">summary &#39;...&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">description &#39;.......&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">project_page &#39;UNKNOWN&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">## Add dependencies, if any</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">dependency &#39;puppetlabs/stdlib&#39;, &#39;&gt;= 3.2.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>README</h2>

<p>It&#8217;s also good practice to add a <code>README</code>, as explained in
<a href="https://puppetlabs.com/blog/writing-great-modules-an-introduction/">this must-read</a>
from Puppetlabs itself. I won&#8217;t go into details here, since apart from a common
layout, information in this file vary greatly depending on the project.<br/>
The only thing I feel to say is quoting the suggestion in that same article
of reading the readme of Carl Caum&#8217;s
<a href="http://github.com/puppetlabs/puppetlabs-bacula">Bacula module</a>; that explains
pretty everything.</p>

<h2>Smoke tests</h2>

<p>If you feel really cool, you can also add a smoke test into the <code>tests</code> folder,
which is basically a working manifest that can be called directly with <code>puppet
apply --noop</code>. If you&#8217;re using the <code>module</code> face of the <code>puppet</code> command, it
will automatically create a <code>init.pp</code> that includes the main module&#8217;s class.
Just, pay attention to the fact that you would need to keep this manifests
up-to-date with your code (e.g. setting proper parameters and instantiating
other resources that participate in the definition of a real, working
use-case).</p>

<h2>What happened to Git?</h2>

<p>Till now, I completely left out versioning this skeleton project. This is
because I didn&#8217;t find yet my preferred way to properly handle versioning and easily
enable to bootstrap new modules based on this skeleton. I don&#8217;t exclude this
way could be putting everything in a gem or rake task or bash script that can bootstrap a
directory where a module is to be developed. Will see what the immediate future
will suggest. For now, please allow me not to give an answer on this subject.</p>

<h2>Additional resources</h2>

<p>You can find additional information about testing Puppet code in
<a href="https://puppetlabs.com/blog/the-next-generation-of-puppet-module-testing/">these</a>
<a href="https://puppetlabs.com/blog/test-driven-development-with-puppet/">articles</a>
from
<a href="https://puppetlabs.com/blog/verifying-puppet-checking-syntax-and-writing-automated-tests/">Puppet Labs</a>.
Note that few things, like, Cucumber for Puppet, are considered deprecated;
nevertheless, they&#8217;re worth reading if you care about quality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My (brief) journey on release management]]></title>
    <link href="http://blog.dontwakethecat.net/blog/2013/02/07/my-brief-journey-on-release-management/"/>
    <updated>2013-02-07T20:10:00+01:00</updated>
    <id>http://blog.dontwakethecat.net/blog/2013/02/07/my-brief-journey-on-release-management</id>
    <content type="html"><![CDATA[<p>Choice of the format: gem or deb?
Deb because:
- I&#8217;m managing an application, not a library (cite Yehuda Katz post about this
  subject)
- I want to make the application self contained so to avoid dependency
  conflicts as much as possible (e.g. with puppet)
- I still can&#8217;t figure out how to do the latter with gems</p>

<p>Choice of the filesystem layout -> Where to put files?
Quote Filesystem Hierarchy Standard:</p>

<blockquote><p>/opt is reserved for the installation of add-on application software packages.</p>

<p>A package to be installed in /opt must locate its static files in a separate
/opt/<package> or /opt/<provider> directory tree</p>

<p>Programs to be invoked by users must be located in the directory
/opt/<package>/bin</p>

<p>Host-specific configuration files must be installed in /etc/opt</p>

<p>/usr is the second major section of the filesystem. /usr is shareable,
read-only data. That means that /usr should be shareable between various
FHS-compliant hosts and must not be written to. Any information that is
host-specific or varies with time is stored elsewhere.</p>

<p>Large software packages must not use a direct subdirectory under the /usr
hierarchy.</p>

<p>/usr/lib includes object files, libraries, and internal binaries that are not
intended to be executed directly by users or shell scripts. [22]</p>

<p>Applications may use a single subdirectory under /usr/lib. If an application
uses a subdirectory, all architecture-dependent data exclusively used by the
application must be placed within that subdirectory.</p>

<p>/usr/bin : Most user commands
Purpose</p>

<p>This is the primary directory of executable commands on the system.
Choice of /usr/lib + symlinks: depict idea, chosen because I feel better about
it, and also seen more often in real packages (like OpenJDK). /opt seems to be
used &#8220;manually&#8221; when installing pre-backed applications (like custom JVM
versions or Java application server that just need to get extracted into a
folder).</p></blockquote>

<p>Classic packaging steps (as per common packaging guides):
- download source package tarball
- extract
- ./configure
- makea -> compile, almost not necessary in ruby
- make install -> puts file in right place on filesystem, can be fooled to
  install to a custom dir usually specifying (at least) a &#8211;prefix option in configure</p>

<p>Identified steps for building/releasing the package:
- generate source package -> depict structure, make rake task (cite puppetlabs source)
 - tar format, just contains the full source tree (something like a clone of a
   source repository)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speaking in tongues with SSL]]></title>
    <link href="http://blog.dontwakethecat.net/blog/2013/01/22/speaking-in-tongues-with-ssl/"/>
    <updated>2013-01-22T16:56:00+01:00</updated>
    <id>http://blog.dontwakethecat.net/blog/2013/01/22/speaking-in-tongues-with-ssl</id>
    <content type="html"><![CDATA[<p>This was a nice one; let me explain.</p>

<p>I&#8217;ve setup a PotgreSQL host to hold all the various databases for the various
services deployed in the infrastructure. Since I know I&#8217;m not a security
expert, where I can I try to do the bare minumum needed and use SSL. This is
the case for PostgreSQL; not only, but I try hard to enforce two-way
certificate validation where possibile.</p>

<!-- More -->


<p>It turns out that despite the simplicity behind the concept of two-way
certificate validation, very few <em>&#8220;modern&#8221;</em> services support that in a
user-friendly way. I already had a chance to rant a bit on Twitter about the
problems Puppet is currently facing with SSL; this time I want to tell you this
story that involves the <a href="https://code.google.com/p/gerrit/">Gerrit Code Review</a>
application and the way I solved the problem, which in my opinion is quite
hacky (and will possibly break things in a near future).</p>

<p>First, a little overview of two-way SSL certificate validation. Basically, in
normal circumstances, during a SSL handshake, only the client verifies that the
certificate the server is providing is valid (checking against a list of known
and trusted Certificate Authorities); when performing two-way validation, this
process is true also for the server. That is, the server expects the client to
send a certificate and verifies that it can be trusted with the same mechanism.<br/>
This is useful when you&#8217;re running your own PKI and can freely issue
certificates to all your hosts; it becomes a form of authentication similar to
that we all use when doing public key authentication in SSH (maybe even
stronger).<br/>
For this to work, obviously, there must be explicit configuration support on
the client service to point to certificate, private key and CA that will be
used when handshaking with the server. Also, note that you cannot simply
disable certificate validation, since this will only lower the barrier <strong>on one
side</strong> of the communication channel: the server will still require you (the
client) to provide a valid certificate (in most cases you can tell the server
to relax the constraint, but then this discussion would become a little
pointless).</p>

<p>Here is where problems begin: let&#8217;s look specifically at how this can be
handled in Gerrit.<br/>
In particular, let&#8217;s see how a typical database setup looks like in Gerrit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[database]</span>
</span><span class='line'>  <span class="na">type</span> <span class="o">=</span> <span class="s">POSTGRESQL</span>
</span><span class='line'><span class="s">  hostname = postgresql.derecom.it</span>
</span><span class='line'><span class="s">  database = gerrit</span>
</span><span class='line'><span class="s">  username = gerrit</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will tell JDBC to connect to <code>postgresql.derecom.it</code> and look for database
<code>gerrit</code>, authenticating with user <code>gerrit</code> (password is handled in another
file). See? No mention to <strong>SSL</strong>. Unofrtunately, JDBC doesn&#8217;t automatically
recognizes that it needs to setup a SSL connection, and trying to boot the
gerrit server results in this kind of error on the PosgtreSQL host:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="err">FATAL:</span>  <span class="err">no</span> <span class="err">pg_hba.conf</span> <span class="err">entry</span> <span class="err">for</span> <span class="err">host</span> <span class="err">&quot;x.y.z.w&quot;,</span> <span class="err">user</span> <span class="err">&quot;gerrit&quot;,</span> <span class="err">database</span> <span class="err">&quot;gerrit&quot;,</span> <span class="err">SSL</span> <span class="err">off</span>
</span></code></pre></td></tr></table></div></figure>


<p>(that&#8217;s because I <strong>don&#8217;t allow unencrypted connections to databases</strong>).</p>

<p>It seems that there&#8217;s no hope to solve this. Luckily, though, Gerrit use JDBC
under the hood to manage the connection pool; looking through
<a href="http://jdbc.postgresql.org/documentation/80/connect.html">JDBC PosgtreSQL driver documentation</a>,
we can read that:</p>

<blockquote><p> In addition to the standard connection parameters the driver supports a
 number of additional properties which can be used to specify additional
 driver behavior specific to PostgreSQL™. These properties may be specified
 in either the connection URL or an additional Properties object parameter to
 DriverManager.getConnection. The following examples illustrate the use of
 both methods to establish a SSL connection.</p>

<p>String url = &#8220;jdbc:postgresql://localhost/test&#8221;;<br/>
Properties props = new Properties();<br/>
props.setProperty(&#8220;user&#8221;,&#8221;fred&#8221;);<br/>
props.setProperty(&#8220;password&#8221;,&#8221;secret&#8221;);<br/>
props.setProperty(&#8220;ssl&#8221;,&#8221;true&#8221;);<br/>
Connection conn = DriverManager.getConnection(url, props);</p>

<p>String url =<br/>
&#8220;jdbc:postgresql://localhost/test?user=fred&amp;password=secret<strong>&amp;ssl=true</strong>&#8221;;<br/>
Connection conn = DriverManager.getConnection(url);</p></blockquote>

<p>So, it seems that if we could pass a <code>ssl</code> parameter to the JDBC URL we could
enable SSL while connection to PostgreSQL. A first solution is to set the
connection type to <code>JDBC</code> instead of <code>POSTGRESQL</code> in Gerrit configuration. This
would allow you to directly specify the URL JDBC should connect to, parameters
included.<br/>
Since I didn&#8217;t know if I would have had to specify also the user/pass in that
same URL, I wanted to try to stick to the <code>POSTGRESQL</code> type. Looking at
<a href="https://gerrit.googlesource.com/gerrit/+/7029fc15df86e6ef886d67a8117a39d21320fe60/gerrit-pgm/src/main/java/com/google/gerrit/pgm/util/DataSourceProvider.java">this class&#8217; source code</a>,
it turns out that Gerrit itself builds a JDBC URL, so using one of the other
connection types is just a tiny wrapper over the JDBC type. However, the URL is
built leaving out username and password, which are set separately when actually
instantiating the connection, and the last variable in the URL concatenation is
the database name. So, I modified the configuration by directly appending the
<code>ssl</code> param to the database name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[database]</span>
</span><span class='line'>  <span class="na">type</span> <span class="o">=</span> <span class="s">POSTGRESQL</span>
</span><span class='line'><span class="s">  hostname = postgresql.derecom.it</span>
</span><span class='line'><span class="s">  database = gerrit?ssl=true</span>
</span><span class='line'><span class="s">  username = gerrit</span>
</span></code></pre></td></tr></table></div></figure>


<p>You know what? That works like a charm :)<br/>
Obviously this is a bit hacky, and surely setting a JDBC is a more proper way
to handle this thing, however if it works&#8230;</p>

<p><strong>PS:</strong> I left out from the discussion a fundamental step, which is passing the
certificate, private key and CA to Gerrit to correctly handle the SSL
handshake. This involves passing two additional properties to Gerrit startup
command; I&#8217;ve already written down about it in
<a href="https://gist.github.com/4124338">this Gist</a>, so I won&#8217;t repeat myself here.</p>

<h2>Conclusion</h2>

<p>So, having spent almost 2 hours fixing this issue and writing about it, what I
can hope for is that developers start to care a little more about SSL and the
various ways it can be used. This would surely help changing the impression
that SSL is a though beast, as also noticed by
<a href="https://twitter.com/_masterzen_">Brice Figureau</a> in
<a href="http://www.masterzen.fr/2010/11/14/puppet-ssl-explained/">this post about Puppet SSL PKI</a>, and making our
infrastructures more secure overall.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Master of Puppets (vol. II)]]></title>
    <link href="http://blog.dontwakethecat.net/blog/2013/01/22/master-of-puppets-vol-ii/"/>
    <updated>2013-01-22T15:14:00+01:00</updated>
    <id>http://blog.dontwakethecat.net/blog/2013/01/22/master-of-puppets-vol-ii</id>
    <content type="html"><![CDATA[<p>I&#8217;ll continue here what I&#8217;ll started in the
<a href="http://blog.dontwakethecat.net/blog/2013/01/20/master-of-puppets/">previous post</a>.
We now have a working Puppet Master installation; still, if we want to update
the configuration of the master itself or of one of the managed nodes, we need
to log into the virtual machine and manually edit the files in <code>/etc/puppet</code>.<br/>
What we want to achieve in the long term, though, is to not need to SSH into
machines for this kind of normal operations tasks.</p>

<!-- More -->


<p>So we need a way to extract the configuration contained in the <code>/etc/puppet</code>
directory so that we can manage it from our laptop with our favorite editor.
While we&#8217;re at this, we also put that configuration under version control,
which is always a good thing to do.<br/>
The two friends that will help us in this little journey are
<a href="http://jenkins-ci.org/">Jenkins</a> and the
<a href="http://code.google.com/p/gerrit/">Gerrit Code Review</a> application.</p>

<p>Plugins needed:
<a href="https://wiki.jenkins-ci.org/display/JENKINS/SSH+plugin">SSH Plugin</a>
NO &#8211;> <a href="https://wiki.jenkins-ci.org/display/JENKINS/Publish+Over+SSH+Plugin">Publish over SSH</a>
NO &#8211;> <a href="https://wiki.jenkins-ci.org/display/JENKINS/SSH+Agent+Plugin">SSH Agent Plugin</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install git
</span><span class='line'>usermod -s /bin/bash puppet
</span><span class='line'>mkdir ~puppet/.ssh
</span><span class='line'>vi ~puppet/.ssh/authorized_keys
</span><span class='line'>...show options
</span><span class='line'>chown puppet:puppet -R ~puppet/.ssh/
</span><span class='line'>chmod og-rw -R ~puppet/.ssh/</span></code></pre></td></tr></table></div></figure>


<p>Configure job in Jenkins
&#8211;> Setup git URL</p>

<p>Configure Gerrit trigger</p>

<p>Configure Gerrit to handle non-interactive user
* Perform initial connection with Jenkins user
* Add SSH public key
* Login as Administrator
* Groups -> List -> Non-interactive users
* Add user Jenkins to group</p>

<p>Configure access rights for non-interactive users
* Login as administrator
* Projects -> All-Projects -> Access
* Reference: refs/* -> Label Verified +1, -1 Non-interactive users; Submit
  ALLOW Registerd Users
Configure plugin in Jenkins</p>

<p>Setup connection params
Setup default submit when +2 &#8211;> add &#8216;&#8211;submit&#8217; to Successfull verify command
<Add screenshot></p>

<p>Setup global username and email for Git Plugin in Manage Jenkins</p>

<p>Create Gerrit project
ssh -p 29418 stefano.zanella@review.derecom.it gerrit create-project &#8211;name puppetmaster-config
git clone ssh://stefano.zanella@review.derecom.it:29418/puppetmaster-config.git
cd puppetmaster-config
git config remote.origin.push refs/heads/<em>:refs/for/</em>
scp -P 29418 stefano.zanella@review.derecom.it:hooks/commit-msg .git/hooks</p>

<p>Add puppet configuration
scp -r root@puppet.derecom.it:/etc/puppet/* .
touch manifests/.gitkeep
touch modules/.gitkeep
git add -A
git commit -m &#8220;Store current configuration&#8221;
git push</p>

<p>Create Jenkins job for reviewing configuration changes
puppetmaster-config-review
Source Code Management: Git
Repositories: ssh://jenkins@review.derecom.it:29418/puppetmaster-config
Click on Advanced
Refspec $GERRIT_REFSPEC
Branches to build $GERRIT_BRANCH
Click on Advanced
Choosing Strategy = Gerrit Trigger
Build Triggers
Select Gerrit event
Click Advanced
Verify votes:
0, 1, -1, 0
0, 2, -2, 0
Trigger on Patchset Created
Gerrit project: Type Plain, Pattern puppetmaster-config, Branches: Type Path
Branches **
Build -> Add build step -> Execute Shell
Command:
echo &#8220;Nothing to check, build OK&#8221;
exit 0</p>

<p>Add Gerrit host to known hosts on the slave. Also add Jenkins public/private
key to slave .ssh, otherwise it won&#8217;t be able to connect to Gerrit.</p>

<p>Add Jenkins job to update configuration on Puppet Master
puppetmaster-config-deploy
Source Code Management: None
Build Triggers: Gerrit Event
Gerrit Trigger:
Silent Mode on
Trigger on: Change merged
Gerrit project: as above
Build: execute shell script on remote host using ssh
SSH Site: puppet@puppet.derecom.it:22
Command: cd /etc/puppet &amp;&amp; git pull</p>

<p>Note that this kind of trigger mode cannot be tested in Jenkins with the
Gerrit tool in the dashboard&#8217;s homepage. You must actually push a change and
test the whole workflow.</p>

<p>Swap configuration directory with repository
cp -r /etc/puppet /etc/puppet.bak
git clone https://review.derecom.it/puppetmaster-config /etc/puppet</p>

<p>Add Jenkins job to update configuration on Puppet Master
puppetmaster-config-deploy
Source Code Management: None
Build Triggers: Gerrit Event
Gerrit Trigger:
Silent Mode on
Trigger on: Change merged
Gerrit project: as above
Build: execute shell script on remote host using ssh
SSH Site: puppet@puppet.derecom.it:22
Command: source .bash_profile &amp;&amp; cd /etc/puppet &amp;&amp; git pull &amp;&amp; rake</p>

<p>Rake default task: DESCRIPTION!!!</p>

<p>Note that this kind of trigger mode cannot be tested in Jenkins with the
Gerrit tool in the dashboard&#8217;s homepage. You must actually push a change and
test the whole workflow.</p>

<p>Add CA to ca-bundle
cat /etc/pki/tls/certs/Derecom-Auth-CA-bundle.crt | ssh root@puppet.derecom.it &#8220;cat >> /etc/pki/tls/certs/ca-bundle.crt&#8221;</p>

<p>Install rbenv on puppet master
yum groupinstall &#8216;development tools&#8217;
yum install zlib-devel libxml2-devel libxslt-devel openssl-devel
su - puppet -s /bin/bash
git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
echo &#8216;export PATH=&#8221;$HOME/.rbenv/bin:$PATH&#8221;&#8217; >> ~/.bash_profile
echo &#8216;eval &#8220;$(rbenv init -)&#8221;&#8217; >> ~/.bash_profile</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Master of Puppets]]></title>
    <link href="http://blog.dontwakethecat.net/blog/2013/01/20/master-of-puppets/"/>
    <updated>2013-01-20T01:16:00+01:00</updated>
    <id>http://blog.dontwakethecat.net/blog/2013/01/20/master-of-puppets</id>
    <content type="html"><![CDATA[<p>Let me start the real first post of this blog (apart from the introduction)
with a citation. Despite the title, I won&#8217;t talk about music. Instead, I&#8217;ll
show you a photo:</p>

<!-- More -->


<p><img src="http://farm9.staticflickr.com/8330/8395925627_7fd19c4aba_z.jpg"></p>

<p>It&#8217;s a shot I&#8217;ve taken in <strong>Bern</strong> on August 2011; it&#8217;s the window of a toys
shop you can find under the cloisters of Gerechtigkeitstraße. Its name? <em>Antics
und Puppenklinik</em>, which even without translation projects us directly to the
focus of this and probably subsequent writings.</p>

<p>As promised in my <a href="http://blog.dontwakethecat.net/blog/2013/01/19/pre-flight-debrief/">first post</a>
I&#8217;ll document the setup of a node that will act as the <strong>puppetmaster</strong> for my
company&#8217;s network. If you don&#8217;t know what I&#8217;m talking about, you probably
landed on the wrong page.<br/>
If, however, you&#8217;re a sysadmin or an operations guy
and still don&#8217;t know what I&#8217;m talking about, you should <strong>IMMEDIATELY</strong> go
checking out <a href="http://docs.puppetlabs.com/">Puppet Documentation</a> on the
<a href="http://puppetlabs.com/">Puppet Labs website</a>.</p>

<p>Before starting, here&#8217;s a brief overview. We&#8217;ll start by installing a fresh
<strong>CentOS 6.3</strong> on a <strong>KVM</strong> virtual machine, then we will step into installing
<strong>Puppet</strong> and configuring it so it can start talking with other machines. For
sure, it isn&#8217;t rocket science; but again, I&#8217;m just trying to document the most
I can about what I do.</p>

<h2>Installing Bare OS</h2>

<p>Select OS for the task is, as preannounced, <strong>CentOS</strong>. This is my standard
choice where no special features are needed (think multimedia packages, for the
most part). The reason of this choice is not fully clear even to me, but I
think my preference goes to it for its small footprint, the availability of
third-party repositories with fairly updated, yet robust, packages that makes
it in general quite stable, even when upgrading. On this subject, I remember
painful hours spent on distro/packages broken upgrade paths with Debian and
derivatives; I&#8217;m sure things got better in the last few years, but for the
moment I see little to no reason to move to another OS as my standard choice.</p>

<p>The puppetmaster will run on a VM hosted on a KVM hypervisor; I can hear you
say: <em>&#8220;Why not cloud?&#8221;</em>. I can say there&#8217;s a reason, which is associated
mainly to costs, but I&#8217;ll leave that discussion for another post.</p>

<p>To install VMs on KVM/libvirt I usually rely on <strong>virt-install</strong>, a Python tool
that takes care of generating the relevant XML definition for the VM and booting
it with an installation media that it&#8217;s removed when installation finishes.<br/>
On CentOS, it can be installed on the hypervisor simply with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install python-virtinst
</span></code></pre></td></tr></table></div></figure>


<p>I won&#8217;t go through here on what you need to have a working KVM setup: the only
thing I need to point out for the moment is that I have configured a pool in
libvirt associated to a <strong>LVM Volume Group</strong> called <code>vmstorage</code>.</p>

<p>That said, let&#8217;s start the installation process. We&#8217;ll create a VM with <strong>1GB
RAM</strong>, <strong>1 virtual CPU</strong> and <strong>10GB of storage</strong>. You can download the CentOS
installation CD .iso from
<a href="http://mi.mirror.garr.it/mirrors/CentOS/6.3/isos/x86_64/CentOS-6.3-x86_64-minimal.iso">here</a>.
I suggest downloading the minimal installation pack since it requires much less
space than the full DVD and provides everything needed to install a bare
minimum system.
Once you have saved the installation media, say, into <code>/media</code>, we can proceed
with booting the VM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>virt-install --name<span class="o">=</span>bernstein --ram<span class="o">=</span>1024 --vcpus<span class="o">=</span>1 <span class="se">\</span>
</span><span class='line'>--cdrom<span class="o">=</span>/media/CentOS-6.3-x86_64-minimal.iso <span class="se">\</span>
</span><span class='line'>--os-type<span class="o">=</span>linux --os-variant<span class="o">=</span>rhel6 <span class="se">\</span>
</span><span class='line'>--disk <span class="nv">pool</span><span class="o">=</span>vmstorage,size<span class="o">=</span>10 --network <span class="nv">bridge</span><span class="o">=</span>br0,model<span class="o">=</span>e1000 <span class="se">\</span>
</span><span class='line'>--video<span class="o">=</span>vga --vnc --connect qemu:///system
</span></code></pre></td></tr></table></div></figure>


<p>At this point we don&#8217;t have any textual access to the VM; however, we can
setup a SSH tunnel to the hypervisor binding the port where the VNC server
for the instance is listening, which can be found with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>virsh vncdisplay bernstein
</span><span class='line'>:3
</span></code></pre></td></tr></table></div></figure>


<p>After that, if you are working on a Mac, i suggest you to try the excellent
<a href="http://sourceforge.net/projects/chicken/">Chicken</a> VNC client (I&#8217;ve
tried many, even the Screen Sharing app available by default, but found this is
the app that works best). The latest version (<strong>2.2b2</strong> as time of writing)
can also automatically setup a SSH tunnel for you.</p>

<p>After we have a connection to the VM&#8217;s display, we can start the installation
process. To fully document it, I&#8217;d need to share a screenshot for every step.
Since I&#8217;m not a Martian, you will excuse me if I go through this phase by
simply pointing out the relevant configuration options.
Here are the values of the fields filled during installation:</p>

<ul>
<li><strong>Language</strong>: English</li>
<li><strong>Keyboard layout</strong>: U.S. English</li>
<li><strong>Device Type</strong>: Basic Storage Devices</li>
<li><strong>Hostname</strong>: bernstein.derecom.it</li>
<li><strong>Timezone</strong>: Europe/Rome</li>
<li><strong>Root password</strong>: Hahaha, really you thought I&#8217;d have told you?</li>
<li><strong>Disk partitioning</strong>: Select <em>&#8220;Replace Existing Linux Systems&#8221;</em>, then tick
<em>Review and modify partitioning layout</em>. Modify default layout as follows:

<ul>
<li>/dev/vda1   500   ext4    /boot</li>
<li>/dev/vda2   9739  LVM     os

<ul>
<li>root      7720  ext4    /root</li>
<li>swap      2016  swap    -</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>After the installation process finishes, the VM will be shut down. If we want
to restart it and also have it automatically restarted when server reboots, we
can issue the following commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>virsh autostart bernstein
</span><span class='line'>virsh start bernstein
</span></code></pre></td></tr></table></div></figure>


<p>After that, we still need to connect via VNC before we&#8217;ll be able to SSH into
the machine. Here are the basic steps needed to setup networking (I do not use
DHCP on the main server&#8217;s subnet):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vi /etc/sysconfig/network-scripts/ifcfg-eth0
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">DEVICE</span><span class="o">=</span><span class="s2">&quot;eth0&quot;</span>
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span><span class="s2">&quot;static&quot;</span>
</span><span class='line'><span class="nv">HWADDR</span><span class="o">=</span><span class="s2">&quot;52:54:00:77:21:AE&quot;</span>
</span><span class='line'><span class="nv">NM_CONTROLLED</span><span class="o">=</span><span class="s2">&quot;no&quot;</span>
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span><span class="s2">&quot;yes&quot;</span>
</span><span class='line'><span class="nv">TYPE</span><span class="o">=</span><span class="s2">&quot;Ethernet&quot;</span>
</span><span class='line'><span class="nv">UUID</span><span class="o">=</span><span class="s2">&quot;8af5d6eb-e0c3-4401-9fd9-cad42c011d3b&quot;</span>
</span><span class='line'><span class="nv">IPADDR</span><span class="o">=</span>172.16.32.253
</span><span class='line'><span class="nv">NETMASK</span><span class="o">=</span>255.255.255.0
</span><span class='line'><span class="nv">GATEWAY</span><span class="o">=</span>172.16.32.254
</span><span class='line'><span class="nv">DNS1</span><span class="o">=</span>8.8.8.8
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>service network restart
</span></code></pre></td></tr></table></div></figure>


<p>Also, I setup some mnemonic entries on our authoritative DNS. They will come in
handy very soon:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bernstein               A       172.16.32.253
</span><span class='line'>puppet                  CNAME   bernstein
</span><span class='line'>puppetmaster            CNAME   bernstein
</span></code></pre></td></tr></table></div></figure>


<p>At this point, we can start do some basic configuration before installing
Puppet.</p>

<h2>Basic Configuration</h2>

<p>First thing first: disable SELinux. I haven&#8217;t found the time yet to study and
understand how SELinux works, so I still prefer to let it out of the game:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed -i -e <span class="s1">&#39;s/SELINUX=enforcing/SELINUX=permissive/g&#39;</span> /etc/sysconfig/selinux
</span><span class='line'>setenforce permissive <span class="c"># This way we avoid to reboot</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, I usually install two additional repositories before doing anything else:
<a href="http://fedoraproject.org/wiki/EPEL">EPEL</a> and
<a href="http://repoforge.org/">RepoForge (was RPMForge)</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rpm -Uvh http://ftp.upjs.sk/pub/mirrors/epel/6/x86_64/epel-release-6-8.noarch.rpm
</span><span class='line'>rpm -Uvh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm
</span></code></pre></td></tr></table></div></figure>


<p>Then it&#8217;s good to update available software:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum update
</span></code></pre></td></tr></table></div></figure>


<p>The next step regards NTP and shouldn&#8217;t be needed, but in my case I found it necessary.<br/>
In fact, in virtualized environments clock sync should be provided directly by
hypervisor by exposing an already NTP synced RTC. This was actually the case
when I used to use Xen, and it still works like that in KVM; the only problem
is that the clock still presents jiffies. So, the best thing to do is install
NTP and forget about that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install ntp
</span><span class='line'>chkconfig ntpd on
</span></code></pre></td></tr></table></div></figure>


<p>Before starting the service, we force an initial synchronization with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ntpd -q
</span></code></pre></td></tr></table></div></figure>


<p>Then:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>service ntpd start
</span></code></pre></td></tr></table></div></figure>


<p>Till now, I never encountered problems with the provided defaults. Maybe in the future
I&#8217;ll also dig into this aspect and customize the configuration; for the moment
I&#8217;ll leave as it is.</p>

<p>This ends the list of basic configuration tasks I usually do. We can now
stop to shave the yak and proceed to dig into the actual subject of the post.</p>

<h2>Installing Puppet</h2>

<p>The awesome guys at <a href="http://puppetlabs.com">Puppet Labs</a> provide the right
repositories for the job; we can just add them and perform a one-command Puppet
installation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rpm -Uvh http://yum.puppetlabs.com/el/6/products/x86_64/puppetlabs-release-6-6.noarch.rpm
</span></code></pre></td></tr></table></div></figure>


<p>If you want to dig more into the topic, here&#8217;s a
<a href="http://docs.puppetlabs.com/guides/puppetlabs_package_repositories.html">very good section</a>
on the Puppet Labs documentation site.</p>

<p>After adding the repo, Puppet server can be installed with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install puppet-server
</span></code></pre></td></tr></table></div></figure>


<p>This will also take care of installing Ruby. The latest version available in
CentOS is still a 1.8.7 as time of writing, but it&#8217;s perfectly suitable to run
Puppet&#8217;s applications.</p>

<h2>Configuring the Master</h2>

<p>We want to configure the puppetmaster both as the master as well as an agent
for itself. Both configurations are done in <code>/etc/puppet/puppet.conf</code>.<br/>
We start by configuring the most basic options for both the master and the
agent; then we&#8217;ll move into configuring the right SSL support for our
infrastructure.</p>

<h3>Basic configuration options</h3>

<p>For what concerns the master, the only option we touch for the moment is the
one that enables distribution of custom facts and types from the server to the
agents (plugin sync):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[main]</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'><span class="na">pluginsync</span> <span class="o">=</span> <span class="s">true</span>
</span><span class='line'><span class="err">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>This same option, since it is set in the <code>main</code> section, also apply for the
agent.</p>

<p>Also, for the agent, we set the appropriate name for the master via the
<code>server</code> directive. By default the agent would look for an host named <code>puppet</code>;
since our master will be reachable via its FQDN, we need to be explicit about
this. This option belongs to the <code>agent</code> section:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[agent]</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'><span class="na">server</span> <span class="o">=</span> <span class="s">puppet.derecom.it</span>
</span><span class='line'><span class="err">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>SSL Setup</h3>

<p><em>I lost almost an afternoon writing about my intended SSL setup, just to
discover that as of current version (3.0.2), Puppet pose serious limits on
swapping its internal PKI management. In my head, I wanted to completely
disable it and provide certificates myself from my already working PKI.<br/>
Unfortunately, there&#8217;s a serious incompatibility in how OpenSSL creates
certificates subjects and what Puppet intends as a &#8220;valid&#8221; subject. If you
want, you can read more <a href="http://projects.puppetlabs.com/issues/15561">here</a>.<br/>
Until the issue is resolved, I&#8217;m forced to rely on default PKI management; for
this to work, no additional configuration steps are needed.</em></p>

<h3>Service Setup</h3>

<p>Now we&#8217;re finally ready to start the master. With everything in place, it&#8217;s no harder than:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>service puppetmaster start
</span></code></pre></td></tr></table></div></figure>


<p>Similarly, for the agent:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chkconfig puppet on
</span><span class='line'>service puppet start
</span></code></pre></td></tr></table></div></figure>


<p>Notice that we don&#8217;t enable the provided service for the master at boot. This is
because we&#8217;ll setup a proxy with Nginx and Passenger as the following task. We
just run it once so the master can create its own PKI, which is needed in order
to accomplish the following section.</p>

<h3>Proxying Master with Nginx + Passenger</h3>

<p>As suggested by
<a href="http://docs.puppetlabs.com/guides/installation.html#post-install">official documentation</a>,
the default WEBrick server is not suitable for real-life workloads. So, here
we&#8217;ll setup the master to receive requests from a proxy instead of directly
handling them. Selected stack is <a href="http://httpd.apache.org/">Apache</a> and
<a href="http://www.modrails.com/">Phusion Passenger</a>. This is because the version of
nginx that can be found into Passenger or EPEL repos doesn&#8217;t ship with the
<code>ngx_headers_more</code> module, needed to set additional headers when processing
client requests.
The procedure depicted here is adapted from the relative
<a href="http://docs.puppetlabs.com/guides/passenger.html">article</a> in Puppet&#8217;s
documentation.</p>

<p>We start by adding the Phusion Passenger repository, which provides an updated
version of Passenger itself, as well as some other goodies we don&#8217;t need ATM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install http://passenger.stealthymonkeys.com/rhel/6/passenger-release.noarch.rpm
</span></code></pre></td></tr></table></div></figure>


<p>Then we install the relevant applications:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install httpd mod_passenger mod_ssl
</span></code></pre></td></tr></table></div></figure>


<p>At this point we need to setup a root for the Rack application that will serve
Puppet requests. A default Rack application expects three files:</p>

<ul>
<li>a <code>config.ru</code> which can be called by Rack itself</li>
<li>a <code>public/</code> folder</li>
<li>a <code>tmp/</code> folder</li>
</ul>


<p>We start with the required folders, setting our root at <code>/opt/puppetmaster</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /opt/puppetmaster/<span class="o">{</span>tmp,public<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thankfully, Puppet Labs ships a working <code>config.ru</code> file into the master&#8217;s
package:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp /usr/share/puppet/ext/rack/files/config.ru /opt/puppetmaster/
</span><span class='line'>chown puppet:puppet /opt/puppetmaster/config.ru
</span></code></pre></td></tr></table></div></figure>


<p>The only thins that&#8217;s left to do is to setup the required Apache virtual host.
Again, Puppet Labs provides a sample configuration file that can be used as a
base:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp /usr/share/puppet/ext/rack/files/apache2.conf /etc/httpd/conf.d/puppetmaster.conf
</span></code></pre></td></tr></table></div></figure>


<p>The content of the file must be edited to reflect actual paths as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Tunable settings</span>
</span><span class='line'>PassengerHighPerformance on
</span><span class='line'>PassengerMaxPoolSize 12
</span><span class='line'>PassengerPoolIdleTime 1500
</span><span class='line'><span class="c"># PassengerMaxRequests 1000</span>
</span><span class='line'>PassengerStatThrottleRate 120
</span><span class='line'>RackAutoDetect Off
</span><span class='line'>RailsAutoDetect Off
</span><span class='line'>
</span><span class='line'>Listen 8140
</span><span class='line'>
</span><span class='line'>&lt;VirtualHost *:8140&gt;
</span><span class='line'>        SSLEngine on
</span><span class='line'>        SSLProtocol -ALL +SSLv3 +TLSv1
</span><span class='line'>        SSLCipherSuite ALL:!ADH:RC4+RSA:+HIGH:+MEDIUM:-LOW:-SSLv2:-EXP
</span><span class='line'>
</span><span class='line'>        SSLCertificateFile
</span><span class='line'>/var/lib/puppet/ssl/certs/bernstein.derecom.it.pem
</span><span class='line'>        SSLCertificateKeyFile
</span><span class='line'>/var/lib/puppet/ssl/private_keys/bernstein.derecom.it.pem
</span><span class='line'>        SSLCertificateChainFile /var/lib/puppet/ssl/certs/ca.pem
</span><span class='line'>        SSLCACertificateFile    /var/lib/puppet/ssl/certs/ca.pem
</span><span class='line'>        SSLCARevocationFile     /var/lib/puppet/ssl/crl.pem
</span><span class='line'>        SSLVerifyClient optional
</span><span class='line'>        SSLVerifyDepth  1
</span><span class='line'>        <span class="c"># The `ExportCertData` option is needed for agent certificate</span>
</span><span class='line'>expiration warnings
</span><span class='line'>        SSLOptions +StdEnvVars +ExportCertData
</span><span class='line'>
</span><span class='line'>        <span class="c"># This header needs to be set if using a loadbalancer or proxy</span>
</span><span class='line'>        RequestHeader <span class="nb">unset </span>X-Forwarded-For
</span><span class='line'>
</span><span class='line'>        RequestHeader <span class="nb">set </span>X-SSL-Subject %<span class="o">{</span>SSL_CLIENT_S_DN<span class="o">}</span>e
</span><span class='line'>        RequestHeader <span class="nb">set </span>X-Client-DN %<span class="o">{</span>SSL_CLIENT_S_DN<span class="o">}</span>e
</span><span class='line'>        RequestHeader <span class="nb">set </span>X-Client-Verify %<span class="o">{</span>SSL_CLIENT_VERIFY<span class="o">}</span>e
</span><span class='line'>
</span><span class='line'>        DocumentRoot /opt/puppetmaster/public/
</span><span class='line'>        RackBaseURI /
</span><span class='line'>        &lt;Directory /opt/puppetmaster/&gt;
</span><span class='line'>                Options None
</span><span class='line'>                AllowOverride None
</span><span class='line'>                Order allow,deny
</span><span class='line'>                allow from all
</span><span class='line'>        &lt;/Directory&gt;
</span><span class='line'>&lt;/VirtualHost&gt;
</span></code></pre></td></tr></table></div></figure>


<p>At this point, we just need to enable Apache at boot and replace the running
puppetmaster daemon:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chkconfig httpd on
</span><span class='line'>service puppetmaster stop
</span><span class='line'>service httpd start
</span></code></pre></td></tr></table></div></figure>


<h3>Firewall setup</h3>

<p>Before rolling, we need to setup iptables and open the relevant port in order
for the master to be reachable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vi /etc/sysconfig/iptables
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...
</span><span class='line'>-A INPUT -m state --state NEW -m tcp -p tcp --dport 8140 -j ACCEPT
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>service iptables restart
</span></code></pre></td></tr></table></div></figure>


<h2>Testing the installation</h2>

<p>A quick test can be done on the master itself by running a one-shot agent, like
this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>puppet agent --test --debug
</span></code></pre></td></tr></table></div></figure>


<p>If everything is working as expected, the last non-debug line should report a
notice that catalog run went fine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Notice: Finished catalog run in 0.04 seconds
</span></code></pre></td></tr></table></div></figure>


<p>Obviously, the master doesn&#8217;t need to sign the certificate, since the agent is
picking the same certificate the master created on the first run. For the other
agents, we&#8217;ll need to manually sign certificates when new CSRs arrive.</p>

<h2>To be continued&#8230;</h2>

<p>I wrap this post here, since it&#8217;s already too long, but I&#8217;ll continue in the
next one with an important task: putting Puppet&#8217;s configuration under version
control and activating a (continuous) deployment pipeline in Jenkins for it.<br/>
I promise that will be more intersting than this post ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pre-flight debrief]]></title>
    <link href="http://blog.dontwakethecat.net/blog/2013/01/19/pre-flight-debrief/"/>
    <updated>2013-01-19T20:20:00+01:00</updated>
    <id>http://blog.dontwakethecat.net/blog/2013/01/19/pre-flight-debrief</id>
    <content type="html"><![CDATA[<p>I&#8217;m writing this post as a sort of disclamer for the posts that will follow in
the (hopefully near) future.</p>

<p>I became a fan of documentation near three years ago. Since then, I mantained
(and am still mantaining) a sort of private wiki where I try do document
whatever I do. In some cases, this practice saved my ass: since for the moment
I don&#8217;t work in a team, I&#8217;m forced to continuously move between tasks that span
from the full Dev and Ops range. Sometimes quite some time can pass until I
need to return to a previous task to fix/improve things. This can be daunting,
since memory tends to be pretty unreliable in these cases; having a neat trace
of what I did helped me to quickly restore the archived knowledge.<br/>
Over time, documenting <strong>while</strong> doing has become almost a natural practice for
me, at least for what concerns operations tasks.</p>

<p>As stated above, till now I kept this documentation almost private, just
visible to interested friends that wanted to dig from time to time into what I
did; now I feel this practice has to change.<br/>
So, I decided to at least try to make my efforts public. I&#8217;m sure there won&#8217;t
be crowds of developers or sysadmins waiting for my next post; I&#8217;m not doing it
for this reason. I&#8217;ll just try to use the lever that is what in my opinion is
the biggest benfit of open source culture: it forces you to be better at what
you do.</p>

<p>So, this little detour over my recent history just to say one basic thing: I&#8217;m
gonna store here almost everything. So, expect to find obvious things as well
as not-so-obvious ones; actually, I suspect the former will overweight the latter
at least for the moment :)</p>

<p>Having clarified this basic concept, let&#8217;s see what the sudden future reserves:
I&#8217;m gonna talk a lot in the following months about my efforts to automate the
infrastructure I&#8217;m actually managing. This effort started slightly more than a
year ago when I discovered the excellent <a href="http://continuousdelivery.com/">&#8220;Continuous Delivery&#8221; book</a>
by <a href="https://twitter.com/jezhumble">Jez Humble</a> and David Farley.
Meanwhile, I&#8217;ve done a lot to try to add some solid
ground on the infrastructure while maintaining the existent. I now reached a
point in which I can start to implement all those nice automation practices.<br/>
I&#8217;ll try to convert documentation I&#8217;ve already written into something suitable
for the public audience; but, since I don&#8217;t want to start yak shaving right
from the beginning, I&#8217;ll try to stay pragmatic enough and start by writing
currently on-air tasks. For this reason, I apologize in advance if some pieces
will miss from what I&#8217;ll write.</p>

<p>I force myself now to stop adding to this post; enough self-centered writing
for my tastes. Better to start writing something more practical; I&#8217;ll start
with something very very basic and in very very little DevOps style: installing
a Puppet master node.</p>
]]></content>
  </entry>
  
</feed>
