<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: deployment | Stefano Zanella's Blog]]></title>
  <link href="http://blog.dontwakethecat.net/blog/categories/deployment/atom.xml" rel="self"/>
  <link href="http://blog.dontwakethecat.net/"/>
  <updated>2013-09-22T18:20:24+02:00</updated>
  <id>http://blog.dontwakethecat.net/</id>
  <author>
    <name><![CDATA[Stefano Zanella]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My (brief) journey on release management]]></title>
    <link href="http://blog.dontwakethecat.net/blog/2013/02/07/my-brief-journey-on-release-management/"/>
    <updated>2013-02-07T20:10:00+01:00</updated>
    <id>http://blog.dontwakethecat.net/blog/2013/02/07/my-brief-journey-on-release-management</id>
    <content type="html"><![CDATA[<p>Choice of the format: gem or deb?
Deb because:
- I'm managing an application, not a library (cite Yehuda Katz post about this
  subject)
- I want to make the application self contained so to avoid dependency
  conflicts as much as possible (e.g. with puppet)
- I still can't figure out how to do the latter with gems</p>

<p>Choice of the filesystem layout -> Where to put files?
Quote Filesystem Hierarchy Standard:</p>

<blockquote><p>/opt is reserved for the installation of add-on application software packages.</p>

<p>A package to be installed in /opt must locate its static files in a separate
/opt/<package> or /opt/<provider> directory tree</p>

<p>Programs to be invoked by users must be located in the directory
/opt/<package>/bin</p>

<p>Host-specific configuration files must be installed in /etc/opt</p>

<p>/usr is the second major section of the filesystem. /usr is shareable,
read-only data. That means that /usr should be shareable between various
FHS-compliant hosts and must not be written to. Any information that is
host-specific or varies with time is stored elsewhere.</p>

<p>Large software packages must not use a direct subdirectory under the /usr
hierarchy.</p>

<p>/usr/lib includes object files, libraries, and internal binaries that are not
intended to be executed directly by users or shell scripts. [22]</p>

<p>Applications may use a single subdirectory under /usr/lib. If an application
uses a subdirectory, all architecture-dependent data exclusively used by the
application must be placed within that subdirectory.</p>

<p>/usr/bin : Most user commands
Purpose</p>

<p>This is the primary directory of executable commands on the system.
Choice of /usr/lib + symlinks: depict idea, chosen because I feel better about
it, and also seen more often in real packages (like OpenJDK). /opt seems to be
used "manually" when installing pre-backed applications (like custom JVM
versions or Java application server that just need to get extracted into a
folder).</p></blockquote>

<p>Classic packaging steps (as per common packaging guides):
- download source package tarball
- extract
- ./configure
- makea -> compile, almost not necessary in ruby
- make install -> puts file in right place on filesystem, can be fooled to
  install to a custom dir usually specifying (at least) a --prefix option in configure</p>

<p>Identified steps for building/releasing the package:
- generate source package -> depict structure, make rake task (cite puppetlabs source)
 - tar format, just contains the full source tree (something like a clone of a
   source repository)</p>
]]></content>
  </entry>
  
</feed>
